apply plugin: 'com.android.application'

// The sample build uses multiple directories to
// keep boilerplate and common code separate from
// the main sample code.
List<String> dirs = [
        'main',
// main sample code; look here for the interesting stuff.
        'common',
// components that are reused by multiple samples
        'template'] // boilerplate code that is generated by the sample template process

android {
    compileSdkVersion 27
    defaultConfig {
        applicationId "com.example.luoheng.demo"
        minSdkVersion 15
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    adbOptions {
        timeOutInMs = 30 * 1000
    }
    sourceSets {
        main {
            dirs.each { dir->
                java.srcDir "src/$dir/java"
                res.srcDirs "src/${dir}/res"
            }
        }
        androidTest.setRoot('tests')
        androidTest.java.srcDirs = ['tests/src']
    }
}

task printVariantNames() {
    doLast {
        android.applicationVariants.all { variant ->
            println variant.name
        }
    }
}

task copyApks(type: Copy, dependsOn: 'assembleDebug') {
    from ("$buildDir/outputs/apk") {
        exclude '**/*unsigned.apk', '***/*unaligned.apk'
    }
    into '../apks'
}

build.dependsOn copyApks

gradle.taskGraph.whenReady { graph ->
    if (project.hasProperty('noLint')) {
        graph.allTasks.findAll { it.name ==~ /lint.*/}*.enabled = false
    }
}


task installDebugFlavors() {
    android.applicationVariants.all { v ->
        println("v " + v.name)
        if (v.name.endsWith('debug')) {
            println("v.name " + v.name)
            String name = v.name.capitalize()
            println("name " + name)
            dependsOn "install$name"
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'
    implementation project(':mylibrary')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
